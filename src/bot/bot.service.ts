import { Injectable } from '@nestjs/common';
import { Context, Markup } from 'telegraf';
import { WizardScene, Stage } from 'telegraf/scenes';
import { UserService } from '../user/user.service';
import { RoleEnum } from 'src/enums';
import { BotContext } from 'src/types';
import { commands } from 'src/config';
import { FinanceService } from 'src/finance/finance.service';
import { deleteMessageWithDelay, formatDate } from 'src/utils';
import { Finance } from 'src/entities/finance.entity';
import { FinanceStatus } from 'src/entities/finance-status.enum';

@Injectable()
export class BotService {
  constructor(
    private readonly userService: UserService,
    private readonly financeService: FinanceService,
  ) {}

  async start(ctx: Context) {
    const firstName = ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const telegramId = ctx.from?.id;

    const user = await this.userService.getUserInfo(telegramId);

    if (user && user.isRegistered) {
      await ctx.reply(
        `üëã –ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, ${firstName}!\n` +
          `–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞. –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ`,
      );
    } else {
      await ctx.reply(
        `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n\n` +
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç.\n` +
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.`,
      );

      // Only save if user does not exist
      if (!user) {
        await this.userService.saveUserData(ctx); // default role USER
      }
    }

    await this.showMenu(ctx);
  }

  async showMenu(ctx: Context) {
    const user = await this.userService.getUserInfo(ctx.from?.id);
    if (!user) return;

    const buttons = [[commands.stat]];

    switch (user.role) {
      case RoleEnum.USER:
        if (!user.isRegistered) {
          buttons[0].unshift(commands.registration); // show only if not registered
        }
        break;
      case RoleEnum.SENDER:
        buttons[0].push(commands.search);
        break;
      case RoleEnum.RECEIVER:
        buttons[0].push(commands.receive_money);
        break;
      case RoleEnum.ADMIN:
        buttons.push([commands.search, commands.admin]);
        break;
    }

    buttons.push([commands.settings]);

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard(buttons).resize());
  }

  async getStatistics(ctx: Context) {
    const stats = await this.userService.getUserStats(ctx?.from?.id);
    if (!stats) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π.');
      return;
    }

    let message = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n';

    message += `üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${stats.totalTransactions} \n`;
    message += `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${stats.totalAmount}$\n`;

    if ('totalUsers' in stats) {
      // This means the user is an Admin
      message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n`;
      message += `üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂: ${stats.lastTransactionDate ? formatDate(stats.lastTransactionDate) : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n`;
      message += `üí≥ –°—É–º–º–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${stats.lastTransactionAmount}$`;
    } else {
      // Sender, Receiver, or User
      message += `üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂: ${stats.lastTransactionDate ? formatDate(stats.lastTransactionDate) : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`;
    }

    await ctx.reply(message);
  }

  registerWizard(): WizardScene<BotContext> {
    return new WizardScene<BotContext>(
      'REGISTER_WIZARD',
      async (ctx) => {
        const sentMessage = await ctx.reply(
          'üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: user123):',
        );
        (ctx.wizard.state as any).lastBotMessageId = sentMessage.message_id;
        return ctx.wizard.next();
      },
      async (ctx) => {
        if (!ctx.message || !('text' in ctx.message)) {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.');
          return;
        }

        const userInput = ctx.message.text.trim();

        // ‚úÖ Check if the input is a reserved command or button text
        if (['/start', Object.values(commands).join(',')].includes(userInput)) {
          await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.');
          return;
        }

        // ‚úÖ Delete user input message
        await ctx.deleteMessage(ctx.message.message_id).catch(() => {});

        (ctx.wizard.state as any).login = userInput;
        const sentMessage = await ctx.reply(
          'üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å –∫–Ω–æ–ø–∫–æ–π:',
          {
            reply_markup: {
              keyboard: [
                [{ text: 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', request_contact: true }],
              ],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          },
        );

        (ctx.wizard.state as any).lastBotMessageId = sentMessage.message_id; // Store bot message ID
        return ctx.wizard.next();
      },
      async (ctx) => {
        if (!ctx.message) {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä.');
          return;
        }

        let phoneNumber: string | undefined;
        if ('contact' in ctx.message) {
          phoneNumber = ctx.message.contact.phone_number;
        } else if ('text' in ctx.message) {
          phoneNumber = ctx.message.text;
        } else {
          await ctx.reply(
            '‚ùå –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.',
          );
          return;
        }

        // ‚úÖ Delete user phone number input message
        await ctx.deleteMessage(ctx.message.message_id).catch(() => {});

        (ctx.wizard.state as any).phone = phoneNumber;
        await this.userService.saveUserData(ctx, {
          phone: (ctx.wizard.state as any).phone,
          login: (ctx.wizard.state as any).login,
          isRegistered: true,
        });

        // ‚úÖ Delete the last bot message before confirming registration
        if ((ctx.wizard.state as any).lastBotMessageId) {
          await ctx
            .deleteMessage((ctx.wizard.state as any).lastBotMessageId)
            .catch(() => {});
        }

        await ctx.reply('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

        // ‚úÖ Show the menu after registration
        await this.showMenu(ctx);

        return ctx.scene.leave();
      },
    );
  }

  setupScenes(): Stage<BotContext> {
    const registerScene = this.registerWizard();
    const stage = new Stage<BotContext>([registerScene]);

    return stage;
  }

  async validateTransaction(
    ctx: BotContext,
    previousAmount: number | null,
    inlineMessage: string,
    recipient?: number | null,
  ) {
    const amount = Number(inlineMessage);
    if (Number(previousAmount) !== Number(inlineMessage)) {
      await ctx.reply('‚ùå –°—É–º–º—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
      return;
    }
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return;
    }
    if (!recipient) {
      await ctx.reply('‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    return true;
  }

  async createTransaction(
    ctx: BotContext,
    previousAmount: number | null,
    inlineMessage: string,
    recipient?: number | null,
  ) {
    const result = await this.validateTransaction(
      ctx,
      previousAmount,
      inlineMessage,
      recipient,
    );
    if (!result) return;

    try {
      const user = await this.userService.getUserInfo(ctx?.from?.id);
      const data = {
        amount: Number(inlineMessage),
        userId: recipient,
        createdBy: user?.id,
      };
      const result = await this.financeService.createPayment(data);
      if (!result) {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      }
      const recipientUser = await this.userService.getUserInfo(recipient);
      const messageId = await ctx.reply(
        `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ${inlineMessage}$ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é${recipient ? ' ' + recipientUser?.login : '.'}`,
      );
      deleteMessageWithDelay(ctx, messageId);
      return result;
    } catch (err) {
      if (err.message !== 'internal_server_error') {
        await ctx.reply(err.message);
      } else {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      }
    }
  }

  async sendPaymentNotification(
    ctx: BotContext,
    transaction?: Finance,
    recipient?: number | null,
    amount?: number,
  ) {
    if (!transaction || !recipient || !amount) return;
    await ctx.telegram.sendMessage(
      recipient,
      `üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${amount}$. –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?`,
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            '‚úÖ –î–∞',
            `payment_confirmation_yes_${transaction.id}`,
          ),
          Markup.button.callback(
            '‚ùå –ù–µ—Ç',
            `payment_confirmation_no_${transaction.id}`,
          ),
        ],
      ]),
    );
  }

  async sendNotification(ctx: BotContext, recipient, message) {
    await ctx.telegram.sendMessage(recipient, message);
  }

  async getPendingTransactions(): Promise<Finance[]> {
    return this.financeService.getPendingTransactions();
  }

  async getTransactionDetailsById(
    id: number,
  ): Promise<Finance | null | undefined> {
    return this.financeService.getTransaction(id);
  }

  async confirmTransactionReceive(
    ctx: BotContext,
    transactionId: number,
    amount: number,
  ) {
    const tx = await this.getTransactionDetailsById(transactionId); // updated method name
    if (!tx) {
      await ctx.reply('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return;
    }

    if (tx.remaining_amount < amount) {
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.');
      return;
    }

    const updatedTx = await this.financeService.receiveAmountFromTransaction(
      transactionId,
      amount,
      ctx.from?.id,
    );

    if (!updatedTx) {
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.');
      return;
    }

    return updatedTx;
  }

  async changeTransactionStatus(
    ctx: Context,
    transactionId: number,
    status: FinanceStatus,
  ) {
    const transactionFound =
      await this.financeService.getTransaction(transactionId);

    if (!transactionFound) {
      await ctx.reply('No transaction found');
    }
    await this.financeService.updateTransaction(transactionId, { status });
  }
}
