import { Injectable } from '@nestjs/common';
import {
  Command,
  Ctx,
  Hears,
  InjectBot,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { BotService } from './bot.service';
import { UserService } from '../user/user.service';
import { Context, Markup, Scenes, Telegraf } from 'telegraf';
import { LogAction } from 'src/decorators';
import { BotContext } from 'src/types';
import {
  answerAndDeleteLastMessage,
  checkPhoneAndReply,
  deleteLastMessage,
  deleteMessageWithDelay,
} from 'src/utils';
import { RoleEnum } from 'src/enums';

@Update()
@Injectable()
export class BotUpdate {
  constructor(
    private readonly botService: BotService,
    private readonly userService: UserService,
    @InjectBot() private readonly bot: Telegraf<BotContext>,
  ) {
    this.bot.hears('üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', (ctx) => this.onRegistration(ctx));
  }

  @Start()
  @LogAction('command_start')
  async onStart(@Ctx() ctx: Context) {
    await this.botService.start(ctx);
  }

  @Command('help')
  @LogAction('command_help')
  async onHelp(@Ctx() ctx: Context) {
    await ctx.reply('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /register, /stats, /help');
  }

  @Hears('üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
  @LogAction('hear_registration')
  async onRegistration(@Ctx() ctx: Scenes.WizardContext) {
    const user = await this.userService.getUserInfo(ctx?.from?.id);
    if (user?.isRegistered) {
      const message = await ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
      deleteMessageWithDelay(ctx, message);
      return;
    }
    await ctx.scene.enter('REGISTER_WIZARD');
  }

  @Hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
  @LogAction('hear_stats')
  async onStats(@Ctx() ctx: Context) {
    await this.botService.getStatistics(ctx);
  }

  @Hears('üìÅ –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
  @LogAction('hear_export_stats')
  async onExportStats(@Ctx() ctx: Context) {
    await this.botService.exportFinanceStats(ctx);
  }

  @Hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
  @LogAction('hear_settings')
  async onSettings(@Ctx() ctx: Context) {
    await ctx.reply(
      '‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω', 'change_login')],
        [Markup.button.callback('üìû –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', 'change_phone')],
      ]),
    );
  }

  @Hears('üîç –ü–æ–∏—Å–∫')
  @LogAction('hear_search')
  async onSearch(@Ctx() ctx: Context) {
    const botCtx = ctx as BotContext;
    await botCtx.reply(
      'üîç –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:',
    );
    botCtx.session.waitingFor = 'search_user';
  }

  @Hears('üí∏ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ')
  @LogAction('hear_receive_money')
  async onReceiveMoney(@Ctx() ctx: BotContext) {
    const userId = ctx.from?.id;
    const user = await this.userService.getUserInfo(userId);

    if (!user || user.role !== RoleEnum.RECEIVER) {
      await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ñ–æ—Ä–º–ª—è—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–Ω–µ–≥.');
      return;
    }

    const pendingTransactions = await this.botService.getPendingTransactions();

    if (!pendingTransactions || pendingTransactions.length === 0) {
      await ctx.reply('üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.');
      return;
    }

    const buttons = pendingTransactions.map((tx) => {
      const remainingAmount = tx.remaining_amount;
      const sender = tx.user?.login || '–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è';
      return [
        Markup.button.callback(
          `üí∞ ${remainingAmount} —Å–æ–º –æ—Ç ${sender}`,
          `receive_tx_${tx.id}`,
        ),
      ];
    });

    await ctx.reply(
      'üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:',
      Markup.inlineKeyboard(buttons),
    );

    ctx.session.waitingFor = 'selecting_transaction';
  }

  @On('contact')
  @LogAction('callback_contact')
  async onContact(@Ctx() ctx: BotContext) {
    if (ctx.session.waitingFor === 'phone' && (ctx.message as any).contact) {
      const newPhone = (ctx?.message as any)?.contact?.phone_number;

      await this.userService.saveUserData(ctx, { phone: newPhone });
      const successMessage = await ctx.reply(
        `‚úÖ –í–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${newPhone}`,
      );
      await this.clearAndReturnMenu(ctx, successMessage);
    }
  }

  @On('text')
  @LogAction('callback_text')
  async onText(@Ctx() ctx: BotContext) {
    const inlineMessage = (ctx.message as any)?.text.trim();
    deleteMessageWithDelay(ctx, ctx.message?.message_id);
    const waitingFor = ctx.session.waitingFor;
    if (ctx.session.waitingForPayment && !waitingFor) {
      console.log('payment');
      await ctx.reply(
        'üíµ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å—É–º–º—É? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –µ—â—ë —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
      );
      ctx.session.paymentAmount = inlineMessage;
      ctx.session.waitingFor = 'confirm_amount';
    }

    switch (waitingFor) {
      case 'login': {
        await deleteLastMessage(ctx);
        const newLogin = inlineMessage;

        if (newLogin.length < 3 || newLogin.length > 20) {
          await ctx.reply(
            '‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
          );
          return;
        }

        await this.userService.saveUserData(ctx, { login: newLogin });
        const successMessage = await ctx.reply(
          `‚úÖ –í–∞—à –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω: ${newLogin}`,
        );
        await this.clearAndReturnMenu(ctx, successMessage);
        return;
      }
      case 'phone': {
        const newPhone = inlineMessage;

        const result = await checkPhoneAndReply(ctx, newPhone);
        if (!result) {
          return;
        }
        await this.userService.saveUserData(ctx, { phone: newPhone });

        const successMessage = await ctx.reply(
          `‚úÖ –í–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${newPhone}`,
        );
        await this.clearAndReturnMenu(ctx, successMessage);
        break;
      }
      case 'search_user': {
        try {
          const users = await this.userService.searchUser(
            inlineMessage,
            ctx?.from?.id,
          );
          for (const user of users) {
            const message = await ctx.reply(
              `üîπ<b>Username: </b> ${user.username || '-'}\nüë§ <b>–õ–æ–≥–∏–Ω:</b> ${user.login || '-'}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${user.phone || '-'}\n`,
              {
                parse_mode: 'HTML',
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: 'üí∞ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏',
                        callback_data: `send_money_${user.id}`,
                      },
                    ],
                  ],
                },
              },
            );
            deleteMessageWithDelay(ctx, message);
          }
        } catch (err: any) {
          await ctx.reply(err.message);
        }

        // ctx.session.waitingFor = null;
        break;
      }
      case 'confirm_amount': {
        const paymentAmount = ctx.session.paymentAmount || 0;
        const recipient = ctx.session.waitingForPayment;
        const transaction = await this.botService.createTransaction(
          ctx,
          paymentAmount,
          inlineMessage,
          recipient,
        );

        await this.botService.sendPaymentNotification(
          ctx,
          transaction,
          recipient,
          paymentAmount,
        );

        ctx.session.waitingFor = null;
        ctx.session.waitingForPayment = null;
        break;
      }
      case 'selecting_transaction': {
        const transactionId = ctx.session.waitingForTransaction;
        const inputAmount = Number(inlineMessage);

        if (!transactionId || isNaN(inputAmount) || inputAmount <= 0) {
          await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.');
          return;
        }

        const tx =
          await this.botService.getTransactionDetailsById(transactionId);
        if (!tx || tx.remaining_amount < inputAmount) {
          await ctx.reply(
            `‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç 1 –¥–æ ${tx?.remaining_amount || 0}$.`,
          );
          return;
        }

        // Store the amount and move to confirmation step
        ctx.session.paymentAmount = inputAmount;
        ctx.session.waitingFor = 'confirm_receving';

        await ctx.reply(
          `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ ${inputAmount}$ –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #${transactionId}? –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`,
        );

        break;
      }
      case 'confirm_receving': {
        const paymentAmount = Number(ctx.session.paymentAmount);
        const confirmAmount = Number(inlineMessage);
        const transactionId = ctx.session.waitingForTransaction;

        if (paymentAmount !== confirmAmount) {
          await ctx.reply('‚ùå –°—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
          return;
        }

        const tx =
          await this.botService.getTransactionDetailsById(transactionId);

        // Complete transaction (partial or full)
        const result = await this.botService.confirmTransactionReceive(
          ctx,
          transactionId,
          paymentAmount,
        );
        if (result) {
          await ctx.reply(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ ${paymentAmount}$.`);
          await this.botService.sendNotification(
            ctx,
            tx?.userId,
            `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${paymentAmount}`,
          );
        }

        // Clear session
        ctx.session.waitingFor = null;
        ctx.session.waitingForTransaction = null;
        ctx.session.paymentAmount = null;
        break;
      }
    }
  }

  async clearAndReturnMenu(ctx: BotContext, successMessage?: any) {
    await answerAndDeleteLastMessage(ctx);
    await this.botService.showMenu(ctx);
    ctx.session.waitingFor = null;
    deleteMessageWithDelay(ctx, successMessage);
  }
}
