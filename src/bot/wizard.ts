import { Scenes } from 'telegraf';
import { BotContext } from 'src/types';
import { UserService } from 'src/user/user.service';
import { BotService } from './bot.service';

export function createRegisterWizard(
  userService: UserService,
  botService: BotService,
): Scenes.WizardScene<BotContext> {
  return new Scenes.WizardScene<BotContext>(
    'REGISTER_WIZARD',
    async (ctx: BotContext) => {
      await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:');
      return ctx.wizard.next();
    },
    async (ctx: BotContext) => {
      if (!ctx.message || !('text' in ctx.message)) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω —Ç–µ–∫—Å—Ç–æ–º.');
        return;
      }
      ctx.wizard.state.login = ctx.message.text.trim();
      await ctx.reply(
        'üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç:',
      );
      return ctx.wizard.next();
    },
    async (ctx: BotContext) => {
      if (!ctx.message) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä.');
        return;
      }

      let phoneNumber: string | undefined;
      if ('contact' in ctx.message) {
        phoneNumber = ctx.message.contact.phone_number;
      } else if ('text' in ctx.message) {
        phoneNumber = ctx.message.text.trim();
      }

      await userService.saveUserData(ctx, {
        login: ctx.wizard.state.login,
        phone: phoneNumber,
        isRegistered: true,
      });

      await ctx.reply('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      await botService.showMenu(ctx);

      return ctx.scene.leave();
    },
  );
}
